---
import { SITE_TITLE, PAGE_SIZE } from "../../../../consts";
import { getCollection } from "astro:content";
import Entry from "../../../../components/entry/Entry.astro";
import Blog from "../../../../layouts/Blog.astro";
import Pagination from "../../../../components/Pagination.astro";

export async function getStaticPaths() {
	const posts = (await getCollection("entry")).sort(
		(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
	);
	const tags = new Set<string>();
	posts.forEach((post) => post.data.tags?.forEach((tag) => tags.add(tag)));

	let params: any[] = [];
	
	Array.from(tags).map(tag => {
		const filteredPosts = posts.filter((post) => post.data.tags?.includes(tag));
		for (let i = 1; i <= filteredPosts.length; i++) {
			params.push({
				params: { tag: tag, page: i}
			})
		}
	});

	return params;
}

const { tag, page } = Astro.params;

const startIndex = (page - 1) * PAGE_SIZE
const endIndex = startIndex + PAGE_SIZE
const posts = (await getCollection("entry")).sort(
		(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
).filter((post) => post.data.tags?.includes(tag));
const maxPage = Math.ceil(posts.length / PAGE_SIZE);

const postAtThisPage = posts.slice(startIndex, endIndex)
---

<Blog title={SITE_TITLE} , description={`Tag:${tag}`}>
	<div>
		<Entry posts={postAtThisPage} />
		<Pagination 
			prev={(page==1)? undefined:`/tags/${tag}/list/${(Number(page)-1)}`} 
			next={(page==maxPage)? undefined:`/tags/${tag}/list/${(Number(page)+1)}`} 
			maxPage={maxPage}
			currentPage={page}
		/>
	</div>
</Blog>
